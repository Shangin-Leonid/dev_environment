"----------------
"--- Основные ---
"----------------

" Установка UTF-8 стандартной кодировкой для файлов
set encoding=utf8

set number

" Показывать колонну на 120 символе строк (по счёту)
set colorcolumn=120

"--------------------
" --- Русификация ---
" -------------------

"  " Работа с вводом (INSERT) без переключения раскладки
noremap ш i
noremap Ш I
noremap ф a
noremap Ф A
noremap щ o
noremap Щ O

" Работа с заменой (REPLACE) без переключения раскладки
noremap к r
noremap К R

" Работа с режимом выделения (VISUAL) без переключения раскладки
noremap м v
noremap М V

" Работа с поиском: следующее и предыдущее совпадение без переключения раскладки
noremap т n
noremap Т N

" Копировать, удалить и вставить без переключения раскладки
noremap н y
noremap Н Y
noremap в d
noremap В D
noremap ч x
noremap Ч X
noremap з p
noremap З P

" Перемещения к началу/концу слов без переключения раскладки
noremap ц w
noremap Ц W
noremap у e
noremap У E
noremap и b
noremap И B

" Некоторые прочие русские буквы
noremap й q
noremap Й Q
noremap с c
noremap С C
noremap п g
noremap П G

" Тут важен именно map, чтобы в дальнейшем
" можно было убрать стандартное действие
" (удаление символа/строки и переход в режим INSERT)
map ы s
map Ы S

" Одинарные кавычки: ' в режиме ввода (INSERT) по нажатию Ctrl+э
inoremap <C-э> '

"-----------------
"--- Подсветка ---
"-----------------

" Дополнительная подсветка для курсора, чтобы различать режимы
"highlight lCursor guifg=NONE guibg=Cyan


" ------------------------------------
" --- Привычные комбинации клавиш  ---
" --- для редакторов вне терминала ---
" ------------------------------------

" Ctrl+s для сохранения файла и возврата в нормальный режим (NORMAL)
"   из NORMAL
nnoremap <C-s> :w<CR>
"   из INSERT
inoremap <C-s> <Esc>:w<CR>
"   из VISUAL
vnoremap <C-s> <Esc>:w<CR>

" Ctrl+c для закрытия текущего файла, находясь в режиме NORMAL
nnoremap <C-c> :q<CR>

" Ctrl+z для отмены изменений и Ctrl+x для возврата к изменениям
" в режимах NORMAL, VISUAL и INSERT
nnoremap <C-z> :undo<CR>
vnoremap <C-z> <Esc>:undo<CR>
inoremap <C-z> <Esc>:undo<CR>i
nnoremap <C-x> :redo<CR>
vnoremap <C-x> <Esc>:redo<CR>
inoremap <C-x> <Esc>:redo<CR>i

" Двигать текущую строку в режиме NORMAL
" вверх и вниз по нажатию Ctrl+Shift+Вверх/Вниз,
" где Вверх/Вниз это соответствующие стрелки на клавиатуре
nnoremap <silent> <C-S-Up> :m .-2<CR>
nnoremap <silent> <C-S-Down> :m .+1<CR>

" Аналогично, но уже для режима VISUAL
" перемещение нескольких строк за раз
vnoremap <silent> <C-S-Up> :m '<-2<CR>gv
vnoremap <silent> <C-S-Down> :m '>+1<CR>gv

" -----------------------------
" --- Настройка отступов, -----
" --- переносов и табуляции ---
" -----------------------------

" Табуляция, использование пробелов вместо \t
set tabstop=4
set shiftwidth=4
set smarttab
set expandtab

" Установка smartindent и autoindent для табуляции
set smartindent

" autoindent: новые строчки копируют отступы прежних
" Иногда плохо срабатывает при вставке, можно закомментировать
set autoindent

" Менять уровень табуляции для режима VISUAL по нажатию > и <
vnoremap <silent> > >gv
vnoremap <silent> < <gv

" ---------------------
" --- Курсор и мышь ---
" ---------------------

" Работа с мышью
"   оставить только прокрутку
" set mouse-=a
"   прокрутка + корректное выделение
" set mouse=n
"   полностью включить
"   (при выделении мышью будет временно
"   переходить в режим VISUAL)
" set mouse=a
set mouse=a

" Показывать позицию курсора справа внизу (обычно, панель находится там)
set ruler


" Всегда иметь визуальные отступы в 5 строк
" от верхнего и нижнего края экрана Vim до курсора.
set scrolloff=5

" Подсвечивать строку на которой находится курсор
set cursorline

" Прекратить подсвечивать её при переходе в режим INSERT
autocmd InsertEnter,InsertLeave * set cursorline!

" -----------------------------
" --- Прочие настройки --------
" -----------------------------

" Сделать размер истории последних изменений
" для undo/redo равным 1000
set undolevels=1000
set history=1000

" «Умный» поиск:
" - при вводе только маленьких (строчных) букв
"   ищет регистро-независимо
" - а если введена хотя бы одна большая (заглавная/прописная)
"   буква, то будет искать регистро-зависимо
set ignorecase
set smartcase

" Функция, убирающая лишние пробелы на концах строк,
" лишние строки в файле, а также лишние строки под конец файла
function! CleanupBeforeWrite()

    " Запоминаем позицию курсора
    let l:line = line('.')
    let l:col = col('.')

    " Убрать лишние пробелы на концах строк
    " % перед s означает, что нужно сразу во всём файле заменять
    :%s/\s\+$//e

    " Добавить пустые строки под конец файла
    " (нужно, чтобы правильно их усечь до одной впоследствии)
    :$s/$/\=repeat("\r", 5)/e
    " Убрать лишние пустые строки в избыточном количестве
    :%s/\n\{5,}/\r\r/e
    " Странно, но при замене \r - это newline,
    " а \n - это null.
    " https://stackoverflow.com/questions/3965883/vim-replace-character-to-n
    " https://unix.stackexchange.com/questions/247329/vim-how-to-replace-one-new-line-n-with-two-ns
    " Оставляем только одну пустую строку под конец файла
    :$-1,$s/\n//e

    " Возвращаем курсор в исходное положение
    call cursor(l:line, l:col)

endfunction

" Автовызов функции выше перед сохраненем файла
autocmd BufWritePre * call CleanupBeforeWrite()

" Не обновлять экран во время исполнения скриптов и макросов,
" чтобы экран не мерцал и не подвисал на больших файлах
set lazyredraw

" Ускорить вывод символов на экран
set ttyfast

" Использовать расширенный синтаксис регулярных выражений по умолчанию
set magic

" Показывать автодополнение в режиме команд
" (EX, :) в виде меню
set wildmenu
set wildchar=<Tab>

" -------------
" --- Цвета ---
" -------------

" 256 цветов (Использовать RGB)
set t_Co=256

" Тот же параметр, но вне графического сервера (Xorg, Wayland)
if !has('gui_running')
    set t_Co=256
endif

" Включение подсветки синтаксиса
syntax enable

" Включение цветов в терминале
if has('termguicolors')
"    set termguicolors
endif

" Изменение цветовой палитры редактора на тёмную
set background=dark

